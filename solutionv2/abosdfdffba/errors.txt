============================= test session starts ==============================
platform linux -- Python 3.10.6, pytest-7.2.0, pluggy-1.0.0
rootdir: /home/robert/newnew/aboba_cup/abosdfdffba
plugins: shell-utilities-1.7.0, helpers-namespace-2021.12.29, skip-markers-1.4.0
collected 3 items

test.py F.F                                                              [100%]

=================================== FAILURES ===================================
___________________________________ test_200 ___________________________________

    def test_200():
        options_G = webdriver.ChromeOptions()
        port = os.getenv('PORT')
        url = os.getenv('URL')
        driver = webdriver.Remote(
            command_executor=f'http://localhost:{port}',
            options=options_G
        )
    
        js_1 = '''
    let callback = arguments[0];
    let xhr = new XMLHttpRequest();
    xhr.open('GET', '
    '''
        js_2 = '''
    ', true);
    xhr.onload = function () {
        if (this.readyState === 4) {
            callback(this.status);
        }
    };
    xhr.onerror = function () {
        callback('error');
    };
    xhr.send(null);
    '''
        driver.get(url)
>       status_code = driver.execute_async_script(js_1 + url + js_2)

test.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:526: in execute_async_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f528cdb2fb0>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Invalid or unexpected toke...wn>\\n#16 0x55782c53ab27 \\u003Cunknown>\\n#17 0x55782c555c23 \\u003Cunknown>\\n#18 0x7f02e12db609 start_thread\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = "{}.{}".format(frame["className"], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Invalid or unexpected token
E       JavaScript stack:
E       SyntaxError: Invalid or unexpected token
E           at new Function (<anonymous>)
E           at executeAsyncScript (<anonymous>:553:26)
E           at <anonymous>:568:29
E           at callFunction (<anonymous>:447:22)
E           at <anonymous>:461:23
E           at <anonymous>:462:3
E         (Session info: chrome=111.0.5563.146)
E       Stacktrace:
E       #0 0x55782c4be243 <unknown>
E       #1 0x55782c2827a6 <unknown>
E       #2 0x55782c286408 <unknown>
E       #3 0x55782c28675b <unknown>
E       #4 0x55782c2f99c1 <unknown>
E       #5 0x55782c2e0082 <unknown>
E       #6 0x55782c2f8932 <unknown>
E       #7 0x55782c2dfe53 <unknown>
E       #8 0x55782c2b29ea <unknown>
E       #9 0x55782c2b3b2e <unknown>
E       #10 0x55782c512d5e <unknown>
E       #11 0x55782c516a80 <unknown>
E       #12 0x55782c4f88b0 <unknown>
E       #13 0x55782c517b63 <unknown>
E       #14 0x55782c4e9f75 <unknown>
E       #15 0x55782c53a998 <unknown>
E       #16 0x55782c53ab27 <unknown>
E       #17 0x55782c555c23 <unknown>
E       #18 0x7f02e12db609 start_thread

../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:249: JavascriptException
____________________________________ test_4 ____________________________________

    def test_4():
        options = Options()
        options.add_argument("start-maximized")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument('--headless')
    
        # парсинг аргументов
        parser = argparse.ArgumentParser()
        parser.add_argument('--url', help='URL of the page to test', required=True)
>       args = parser.parse_args()

test.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/argparse.py:1838: in parse_args
    args, argv = self.parse_known_args(args, namespace)
/usr/lib/python3.10/argparse.py:1871: in parse_known_args
    namespace, args = self._parse_known_args(args, namespace)
/usr/lib/python3.10/argparse.py:2108: in _parse_known_args
    self.error(_('the following arguments are required: %s') %
/usr/lib/python3.10/argparse.py:2595: in error
    self.exit(2, _('%(prog)s: error: %(message)s\n') % args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ArgumentParser(prog='pytest', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)
status = 2
message = 'pytest: error: the following arguments are required: --url\n'

    def exit(self, status=0, message=None):
        if message:
            self._print_message(message, _sys.stderr)
>       _sys.exit(status)
E       SystemExit: 2

/usr/lib/python3.10/argparse.py:2582: SystemExit
----------------------------- Captured stderr call -----------------------------
usage: pytest [-h] --url URL
pytest: error: the following arguments are required: --url
=========================== short test summary info ============================
FAILED test.py::test_200 - selenium.common.exceptions.JavascriptException: Me...
FAILED test.py::test_4 - SystemExit: 2
========================= 2 failed, 1 passed in 8.16s ==========================
